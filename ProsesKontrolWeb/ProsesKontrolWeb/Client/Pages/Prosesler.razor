@page "/prosesler"
@inject HttpClient Http;
@inject IProsesService prosesService
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime

<h3>Prosesler</h3>
<SfGrid DataSource="@GridData" AllowFiltering="true" Toolbar="@(new List<string>() { "Search" })">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
    <GridEvents RowDeselecting="@(()=> buttonDisabled=true)" RowSelecting="@(()=> buttonDisabled=false)" TValue="ProsesModel" OnRecordClick="RowClickHandler"></GridEvents>
    <SfToolbar CssClass="e-toolbar-center">
        @* <SfTooltip Content="Ekle">
            <SfButton CssClass="e-inherit" IconCss="e-icons e-circle-add" OnClick="@(() => navigationManager.NavigateTo("prosesler/new"))"
                      style="width: 40px; margin-right: 10px;color:greenyellow;">
            </SfButton>
        </SfTooltip>
        <SfTooltip Content="İncele">

            <SfButton Disabled="@buttonDisabled" CssClass="e-inherit e-toolbar-item" IconCss="e-icons e-protect-workbook"
                      OnClick="@(()=>ReadOnlyProses(true, selectedUniteId))"
                      style="width: 40px; margin-right: 10px; color:orange">
            </SfButton>
        </SfTooltip>
        <SfTooltip Content="Düzenle">
            <SfButton Disabled="@buttonDisabled" CssClass="e-inherit e-toolbar-item" IconCss="e-icons e-edit"
                      OnClick="@(()=>EditProses(selectedUniteId))"
                      style="width: 40px; margin-right: 10px; color:blue">
            </SfButton>

        </SfTooltip>
        <SfTooltip Content="Sil">
            <SfButton Disabled="@buttonDisabled" CssClass="e-inherit e-toolbar-item" IconCss="e-icons e-delete"
                      OnClick="@(()=>ShowDeleteMessage(selectedUniteId))"
                      style="width: 40px; color:red">
            </SfButton>
        </SfTooltip> *@
        <ToolbarItems>
            <ToolbarItem TooltipText="Ekle" CssClass="e-inherit" PrefixIcon="e-icons e-circle-add" OnClick="@(() => navigationManager.NavigateTo("prosesler/new"))"
                         style="width: 40px; color:greenyellow;">

            </ToolbarItem>

            <ToolbarItem TooltipText="İncele" Disabled="@buttonDisabled" CssClass="e-inherit e-toolbar-item" PrefixIcon="e-icons e-protect-workbook"
                         OnClick="@(()=>ReadOnlyProses(true, selectedUniteId))"
                         style="width: 40px;color:orange">

            </ToolbarItem>
            
            <ToolbarItem TooltipText="Düzenle" Disabled="@buttonDisabled" CssClass="e-inherit e-toolbar-item" PrefixIcon="e-icons e-edit"
                         OnClick="@(()=>EditProses(selectedUniteId))"
                         style="width: 40px; color:blue">

            </ToolbarItem>
            
            <ToolbarItem TooltipText="Sil" Disabled="@buttonDisabled" CssClass="e-inherit e-toolbar-item" PrefixIcon="e-icons e-delete"
                         OnClick="@(()=>ShowDeleteMessage(selectedUniteId))"
                         style="width: 40px; color:red">

            </ToolbarItem>
        </ToolbarItems>




    </SfToolbar>
    <GridColumns>
        <GridColumn Field="Isim" HeaderText="İsim"></GridColumn>
        <GridColumn Field="Aciklama" HeaderText="Açıklama"></GridColumn>
        <GridColumn Field="Birim" HeaderText="Birim"></GridColumn>
        <GridColumn Field="KalipAyarSuresi" HeaderText="Kalıp Ayar Süresi" ClipMode="ClipMode.EllipsisWithTooltip" Format="0:HH:mm"></GridColumn>
        <GridColumn Field="IsSuresi" HeaderText="İş Süresi" Format="0:HH:mm"></GridColumn>
        <GridColumn Field="SaatlikUretimMiktari" HeaderText="Saatlik Üretim Miktarı" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
        <GridColumn Field="UniteModelId" HeaderText="Unite Model Id" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
    </GridColumns>
</SfGrid>
<div style="margin-top:10px"></div>
@* <p>
    <SfButton IsPrimary="true" Content="Veri Ekle" OnClick="@(() => navigationManager.NavigateTo("prosesler/new"))"></SfButton>
</p> *@
@code {
    public List<ProsesModel> GridData { get; set; } = new List<ProsesModel>();
    public bool isReadOnly { get; set; } = false;
    private int selectedUniteId;
    private bool buttonDisabled = true;

    protected async override Task OnInitializedAsync()
    {
        GridData = await prosesService.GetAllProsesModels();
    }
    public async void EditProses(int id)
    {
        if (id == 0)
        {
            return;
        }
        navigationManager.NavigateTo($"prosesler/edit/{id}");
    }
    public async void ShowDeleteMessage(int id)
    {
        if (id == 0)
        {
            return;
        }
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Seçili satırı silmek istediğinize emin misiniz ?"); // Confirm

        if (confirmed)
        {
            DeleteProses(id);
        }
    }
    public async void DeleteProses(int id)
    {
        await prosesService.DeleteProses(id);
        GridData = await prosesService.GetAllProsesModels();
        StateHasChanged();
    }
    public async void ReadOnlyProses(bool isReadOnly, int id)
    {
        if (id == 0)
        {
            return;
        }
        navigationManager.NavigateTo($"prosesler/{isReadOnly}/{id}");
    }
    private async void RowClickHandler(RecordClickEventArgs<ProsesModel> args)
    {
        selectedUniteId = args.RowData.Id;

    }
}
